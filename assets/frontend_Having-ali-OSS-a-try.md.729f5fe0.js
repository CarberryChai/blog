import{l as n,f as s,G as a}from"./framework.5c8a4622.js";const t='{"title":"阿里OSS小试","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是OSS","slug":"什么是oss"},{"level":3,"title":"下面来进行实践","slug":"下面来进行实践"},{"level":2,"title":"小结","slug":"小结"}],"relativePath":"frontend/Having-ali-OSS-a-try.md","lastUpdated":1609742544038}',p={},o=a('<h1 id="阿里oss小试"><a class="header-anchor" href="#阿里oss小试" aria-hidden="true">#</a> 阿里OSS小试</h1><h2 id="什么是oss"><a class="header-anchor" href="#什么是oss" aria-hidden="true">#</a> 什么是OSS</h2><p>oss，全程Object Storage Service，是一种云存储服务。<a href="https://help.aliyun.com/document_detail/31817.html?spm=a2c4g.11174283.2.5.789f7da2cKAB17" target="_blank" rel="noopener noreferrer">点击查看文档详情</a></p><h3 id="下面来进行实践"><a class="header-anchor" href="#下面来进行实践" aria-hidden="true">#</a> 下面来进行实践</h3><p>1、首先当然是注册阿里云账号，购买OSS云存储服务，选标准存储就行，最便宜的，包年9块钱哟 😆</p><p>2、打开对象存储的控制台创建Bucket</p><p><img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/iShot2020-04-30%E4%B8%8B%E5%8D%8809.52.50-1588254876658.png" alt=""></p><p>bucket—翻译过来就是水桶，在这里可以理解为独一无二的名字，因为阿里云会把bucket和存储区域组合成一个域名，例如：bucket为xx-static，存储区域选择为华东杭州(oss-cn-hangzhou), 这样就会组合为<a href="https://xx-static.oss-cn-hangzhou.aliyuncs.com" target="_blank" rel="noopener noreferrer">https://xx-static.oss-cn-hangzhou.aliyuncs.com</a></p><p>3、hover右上角的头像，然后点击AccessKey管理，之后在跳转的页面点击开始使用子用户的AccessKey</p><p><img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/iShot2020-04-30%E4%B8%8B%E5%8D%8810.04.23-1588255474971.png" alt=""></p><p>4、创建子用户，这里其实就是创建一个用户组，给每个用户分发一定的权限，这样就可以使多人对同一个bucket存储进行管理</p><p><img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/iShot2020-04-30%E4%B8%8B%E5%8D%8810.11.42-1588256096968.png" alt=""></p><p>这里选择编程访问，确定之后选择你想分配给该用户的权限，我这里选择的使对对象存储的完全管理。之后会生成AccessKey ID和AccessKey Secret，记录下来，之后要用。</p><p>5、用nodejs编码上传文件</p><div class="language-javascript"><pre><code><span class="token string">&#39;use strict&#39;</span>\n<span class="token keyword">const</span> <span class="token constant">OSS</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ali-oss&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  region<span class="token operator">:</span> <span class="token string">&#39;oss-cn-hangzhou&#39;</span><span class="token punctuation">,</span>\n  accessKeyId<span class="token operator">:</span> <span class="token string">&#39;xxxxxx-**************&#39;</span><span class="token punctuation">,</span>\n  accessKeySecret<span class="token operator">:</span> <span class="token string">&#39;XXXXXXX-***********&#39;</span><span class="token punctuation">,</span>\n  bucket<span class="token operator">:</span> <span class="token string">&#39;your-bucket&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> staticPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../app/public/static&#39;</span><span class="token punctuation">)</span>\nfs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>staticPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">files</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> uploads <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span>\n    store<span class="token punctuation">.</span><span class="token function">putStream</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">images/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>staticPath <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>uploads<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">responses</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      responses<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;upload success 😊&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">errors</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;upload fail:&#39;</span><span class="token punctuation">,</span> errors<span class="token punctuation">,</span> <span class="token string">&#39;😢&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>这里要用到阿里云存储的包--ali-oss，创建一个OSS实例，传入一个配置对象，填写前面几步你得到的信息。</p><p>之后我们读取要上传的静态文件的文件夹，遍历所有文件，然后调用<code>store</code>的实例方法<code>putStream</code>，次方法接受两个参数。第一个就是在bucket上的路径，这个你自己定，第二个参数是对要上传的文件创建一个可读流，这里我们采用了流式上传，你也可以不采用用<code>put</code>方法。<code>store.putStream</code>返回一个promise, 之后我们用<code>Promise.all</code>把所有的上传操作一起执行。</p><h2 id="小结"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2>',18);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
