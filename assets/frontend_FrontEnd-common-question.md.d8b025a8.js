import{o as n,c as s,a}from"./app.0bf1fc6c.js";const t='{"title":"前端常见问题","description":"","frontmatter":{},"headers":[{"level":3,"title":"1、如何实现一个元素的水平垂直居中","slug":"_1、如何实现一个元素的水平垂直居中"},{"level":3,"title":"2、什么是防抖(debounce)和节流(throttle)，有哪些使用场景？","slug":"_2、什么是防抖-debounce-和节流-throttle-，有哪些使用场景？"},{"level":3,"title":"3、为什么要清除浮动呢？清除浮动的方式","slug":"_3、为什么要清除浮动呢？清除浮动的方式"},{"level":3,"title":"4、CSS 实现两栏布局？","slug":"_4、css-实现两栏布局？"},{"level":3,"title":"5、寄生式组合继承的实现？","slug":"_5、寄生式组合继承的实现？"},{"level":3,"title":"6、DOM 事件流","slug":"_6、dom-事件流"},{"level":3,"title":"7、事件委托","slug":"_7、事件委托"},{"level":3,"title":"8、关于 const 和 let 声明的变量不在 window 上","slug":"_8、关于-const-和-let-声明的变量不在-window-上"},{"level":3,"title":"9、分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景","slug":"_9、分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景"},{"level":3,"title":"10、JavaScript 的数据类型","slug":"_10、javascript-的数据类型"},{"level":3,"title":"11、如何获取 url 中?后面的参数？","slug":"_11、如何获取-url-中-后面的参数？"},{"level":3,"title":"12、事件处理程序中，event.target、event.currentTarget 区别？","slug":"_12、事件处理程序中，event-target、event-currenttarget-区别？"},{"level":3,"title":"13、闭包","slug":"_13、闭包"},{"level":3,"title":"14、原型，原型链","slug":"_14、原型，原型链"},{"level":3,"title":"15、前端性能优化？","slug":"_15、前端性能优化？"},{"level":3,"title":"16、for...in 与 for...of 有什么区别？","slug":"_16、for-in-与-for-of-有什么区别？"},{"level":3,"title":"17、密码的显示与隐藏","slug":"_17、密码的显示与隐藏"},{"level":3,"title":"18、简单说一下对this的理解？","slug":"_18、简单说一下对this的理解？"},{"level":3,"title":"19、call和apply的区别","slug":"_19、call和apply的区别"},{"level":3,"title":"20、jsonp 的原理","slug":"_20、jsonp-的原理"},{"level":3,"title":"21、懒加载和预加载","slug":"_21、懒加载和预加载"},{"level":2,"title":"22、js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？","slug":"_22、js执行会阻塞dom树的解析和渲染，那么css加载会阻塞dom树的解析和渲染吗？"},{"level":2,"title":"23、如何判断两个变量相等","slug":"_23、如何判断两个变量相等"}],"relativePath":"frontend/FrontEnd-common-question.md","lastUpdated":1621234023496}',p={},o=a('<h1 id="前端常见问题"><a class="header-anchor" href="#前端常见问题" aria-hidden="true">#</a> 前端常见问题</h1><h3 id="_1、如何实现一个元素的水平垂直居中"><a class="header-anchor" href="#_1、如何实现一个元素的水平垂直居中" aria-hidden="true">#</a> 1、如何实现一个元素的水平垂直居中</h3><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>绝对定位方法：</p><div class="language-scss"><pre><code><span class="token selector">.container </span><span class="token punctuation">{</span>\n  <span class="token property">postion</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>\n  <span class="token selector">.box </span><span class="token punctuation">{</span>\n    <span class="token property">postion</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>\n    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>\n    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>flex 布局方法：</p><div class="language-scss"><pre><code><span class="token selector">.container </span><span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_2、什么是防抖-debounce-和节流-throttle-，有哪些使用场景？"><a class="header-anchor" href="#_2、什么是防抖-debounce-和节流-throttle-，有哪些使用场景？" aria-hidden="true">#</a> 2、什么是防抖(debounce)和节流(throttle)，有哪些使用场景？</h3><p>防抖，顾名思义，就是防止抖动。就是为了防止本来执行一次的事件执行多次。</p><p>常见的使用场景：</p><ol><li>登录、发送短信等，防止用户点击太快发送太多请求。</li><li>调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li></ol><p>代码如下，可以看出来<strong>防抖重在清零 <code>clearTimeout(timer)</code></strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>节流，顾名思义，控制水的流量。控制事件发生的频率，如控制为 1s 发生一次，甚至 1 分钟发生一次。</p><p>常见的使用场景：</p><ol><li><code>scroll</code>事件，每隔一段时间计算一次位置信息等。</li><li>浏览器播放事件，每隔一秒计算进度信息等。</li><li>input 框实时搜索并发送请求展示下来列表，每隔一段事件发送请求（也可以做防抖）</li></ol><p>代码如下，可以看出来<strong>节流重在加锁 <code>timer = timeout</code></strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n        timer <span class="token operator">=</span> <span class="token keyword">null</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_3、为什么要清除浮动呢？清除浮动的方式"><a class="header-anchor" href="#_3、为什么要清除浮动呢？清除浮动的方式" aria-hidden="true">#</a> 3、为什么要清除浮动呢？清除浮动的方式</h3><p>清除浮动是为了清除浮动元素产生的影响。浮动的元素会使没有设置高度的父元素坍塌，从而影响页面后面的布局。</p><p>示例：</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box clear<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>\n    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/IMG_0047-pLH2OM.JPG<span class="token punctuation">&quot;</span></span>\n  <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.box</span> <span class="token punctuation">{</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> #cd0000<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.box &gt; img</span> <span class="token punctuation">{</span>\n    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.clear:after</span> <span class="token punctuation">{</span>\n    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>\n    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>清除浮动的方式：</p><p>1、设置父元素<code>.box</code>的高度。</p><p>2、父元素<code>.box</code>设为<code>BFC</code>， 例如：<code>overfloat: hidden;</code>等，</p><p>3、利用<code>clear</code>属性。</p><div class="language-css"><pre><code><span class="token selector">.clear</span> <span class="token punctuation">{</span>\n  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>\n  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_4、css-实现两栏布局？"><a class="header-anchor" href="#_4、css-实现两栏布局？" aria-hidden="true">#</a> 4、CSS 实现两栏布局？</h3><p>两栏布局指的是左边宽度固定，右边自适应。</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>left<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>right<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>①、float+margin</p><div class="language-scss"><pre><code><span class="token selector">#app </span><span class="token punctuation">{</span>\n  <span class="token selector">.left </span><span class="token punctuation">{</span>\n    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.right </span><span class="token punctuation">{</span>\n    <span class="token property">margin-left</span><span class="token punctuation">:</span> 110px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>②、flex</p><div class="language-scss"><pre><code><span class="token selector">#app </span><span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n  <span class="token selector">.left </span><span class="token punctuation">{</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>\n    <span class="token property">flex</span><span class="token punctuation">:</span> 0 100px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.right </span><span class="token punctuation">{</span>\n    <span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_5、寄生式组合继承的实现？"><a class="header-anchor" href="#_5、寄生式组合继承的实现？" aria-hidden="true">#</a> 5、寄生式组合继承的实现？</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> grade</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade\n<span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>\n<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student\n<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Your grade is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_6、dom-事件流"><a class="header-anchor" href="#_6、dom-事件流" aria-hidden="true">#</a> 6、DOM 事件流</h3><p>事件流包括三个阶段：<strong>事件捕获阶段、目标阶段、事件冒泡阶段</strong>。</p><img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/dnIC4T-djLWiE.png" style="zoom:50%;"><h3 id="_7、事件委托"><a class="header-anchor" href="#_7、事件委托" aria-hidden="true">#</a> 7、事件委托</h3><p>事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到 目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理。</p><p>使用事件代理我们可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理我们还可以实现事件的动态绑定，比如说新增了一个子节点，我们并不需要单独地为它添加一个监听事件，它所发生的事件会交给父元素中的监听函数来处理。</p><h3 id="_8、关于-const-和-let-声明的变量不在-window-上"><a class="header-anchor" href="#_8、关于-const-和-let-声明的变量不在-window-上" aria-hidden="true">#</a> 8、关于 const 和 let 声明的变量不在 window 上</h3><p>在 ES5 中，顶层对象的属性和全局变量是等价的，<code>var</code>、<code>function</code>声明的全局变量，自然也在顶层对象上。</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 10</span>\nwindow<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>\n</code></pre></div><p>但在 ES6 规定，<code>var</code>、<code>function</code>声明的全局变量，依然位于也在顶层对象上，但 <code>let</code>、<code>const</code>、<code>class</code>命令声明的全局变量，不属于顶层对象的属性。</p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">//undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">//undefined</span>\n</code></pre></div><p><img src="https://user-images.githubusercontent.com/20290821/53854366-2ec1a400-4004-11e9-8c62-5a1dd91b8a5b.png" alt=""></p><p>通过上图也可以看到，在全局作用域中，用 let 和 const 声明的全局变量并没有在全局对象中，只是一个块级作用域（Script）中</p><p>怎么获取？在定义变量的块级作用域中就能获取啊</p><h3 id="_9、分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景"><a class="header-anchor" href="#_9、分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景" aria-hidden="true">#</a> 9、分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景</h3><p>结构：</p><p><code>display: none</code>：会让元素从渲染树中消失，渲染的时候不占据任何空间，不能点击。</p><p><code>visibility: hidden</code>：不会让元素从渲染树上消失，渲染元素占据空间，只是内容不可见，不能点击</p><p><code>opacity: 0</code>：不会让元素从渲染树中消失，渲染元素继续占据空间，只是内容不可见，可以点击</p><blockquote><p>reference：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/100" target="_blank" rel="noopener noreferrer">连接</a></p></blockquote><h3 id="_10、javascript-的数据类型"><a class="header-anchor" href="#_10、javascript-的数据类型" aria-hidden="true">#</a> 10、JavaScript 的数据类型</h3><p>截止到 ES2020 JavaScript 有八种数据类型：</p><p>七种基本类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code>和<code>BigInt</code></p><p>一种引用类型：<code>Object</code></p><h3 id="_11、如何获取-url-中-后面的参数？"><a class="header-anchor" href="#_11、如何获取-url-中-后面的参数？" aria-hidden="true">#</a> 11、如何获取 url 中?后面的参数？</h3><div class="language-js"><pre><code><span class="token comment">// 加入location.href = &#39;http://example.com/search?query=%40&amp;name=carberry&#39;</span>\n<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// query=%40&amp;name=carberry</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// carberry</span>\n</code></pre></div><h3 id="_12、事件处理程序中，event-target、event-currenttarget-区别？"><a class="header-anchor" href="#_12、事件处理程序中，event-target、event-currenttarget-区别？" aria-hidden="true">#</a> 12、事件处理程序中，event.target、event.currentTarget 区别？</h3><p><code>event.target</code> ： 表示事件发生的目标元素，即真正引起事件发生的元素。</p><p><code>event.currentTarget</code>：表示绑定事件处理程序的元素</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">// 上面html，点击click button</span>\n  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token comment">// 事件发生的button元素</span>\n    consoloe<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span> <span class="token comment">// 绑定事件处理程序的document元素</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="_13、闭包"><a class="header-anchor" href="#_13、闭包" aria-hidden="true">#</a> 13、闭包</h3><p><strong>闭包是由函数以及创建该函数的词法环境组合而成</strong>，这个环境包含了这个闭包创建时所能访问的所有局部变量</p><h3 id="_14、原型，原型链"><a class="header-anchor" href="#_14、原型，原型链" aria-hidden="true">#</a> 14、原型，原型链</h3><p>每个实例对象（object）都有一个私有属性（称之为<strong>proto</strong>）指向该对象构造函数的原型对象(<code>prototype</code>), 该原型对象也有一个属性(<code>__proto__</code>), 层层向上直到一个对象的原型对象为<code>null</code>，<code>null</code>没有原型，作为原型链的末尾。 几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。</p><h3 id="_15、前端性能优化？"><a class="header-anchor" href="#_15、前端性能优化？" aria-hidden="true">#</a> 15、前端性能优化？</h3><p><strong>减少资源（静态资源，后端加载数据）大小</strong></p><ul><li>压缩代码（HTML/CSS/Js）</li><li>压缩图片</li><li>Tree-Sharking 消除无用代码</li></ul><p><strong>避免同一时间的过多次请求</strong></p><ul><li>CSS 实现雪碧图：使用 background-position 共享一张图</li><li>图片懒加载：监听滚动后 offsetTop，使用 data-src 替换 src（vue-lazyload 插件）</li><li>列表懒加载(分页加载)</li><li>路由懒加载</li><li>代码分包分块加载（webpack）</li><li>预加载技术</li></ul><p><strong>利用缓存（空间换时间）</strong></p><ul><li>CDN 内容分发</li><li>浏览器缓存</li></ul><h3 id="_16、for-in-与-for-of-有什么区别？"><a class="header-anchor" href="#_16、for-in-与-for-of-有什么区别？" aria-hidden="true">#</a> 16、for...in 与 for...of 有什么区别？</h3><p><code>for...in</code>：用于遍历一个对象的可枚举属性, 包括继承的可枚举属性; 遍历的是 key <code>for...of</code>：用于遍历实现了迭代器接口的对象，即对象具有<code>[Symbol.iterator]</code>方法; 遍历的是 value(值)</p><h3 id="_17、密码的显示与隐藏"><a class="header-anchor" href="#_17、密码的显示与隐藏" aria-hidden="true">#</a> 17、密码的显示与隐藏</h3><h3 id="_18、简单说一下对this的理解？"><a class="header-anchor" href="#_18、简单说一下对this的理解？" aria-hidden="true">#</a> 18、简单说一下对<code>this</code>的理解？</h3><p><code>this</code>是在函数被调用的时候指定的，它的取值取决于函数被调用的方式。</p><p>①、作为函数被调用</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_19、call和apply的区别"><a class="header-anchor" href="#_19、call和apply的区别" aria-hidden="true">#</a> 19、<code>call</code>和<code>apply</code>的区别</h3><p>这两个方法作用一模一样，都是给函数指定一个<code>this</code>取值，区别在于传参的形式不同。</p><p><code>call</code>需要把传入的参数意义指定，而<code>apply</code>需要传入一个数组或者类数组。（ps: 此句说的都是第二个参数）</p><h3 id="_20、jsonp-的原理"><a class="header-anchor" href="#_20、jsonp-的原理" aria-hidden="true">#</a> 20、jsonp 的原理</h3><p>jsonp是一种跨域通信的手段，它的原理其实很简单：</p><ol><li>首先是利用script标签的src的属性来实现跨域。</li><li>通过将前端方法作为参数传递到服务端，然后有服务端注入参数之后再返回，实现前后端通信。</li><li>由于script标签的src的属性限制，只能get请求。</li></ol><blockquote><p>前端事先定义一个用于接收数据的全局回调函数，这个函数名作为URL的一部分利用script标签src属性实现跨域，后端返回回调函数的执行，数据作为函数的参数，前端接收到响应会立即执行该回调。</p></blockquote><div class="language-js"><pre><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>options <span class="token operator">||</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">var</span> scriptNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            data <span class="token operator">=</span> options<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            url <span class="token operator">=</span> options<span class="token punctuation">.</span>url<span class="token punctuation">,</span>\n            callback <span class="token operator">=</span> options<span class="token punctuation">.</span>callback<span class="token punctuation">,</span>\n            fnName <span class="token operator">=</span> <span class="token string">&quot;jsonp&quot;</span> <span class="token operator">+</span> id<span class="token operator">++</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 添加回调函数</span>\n        data<span class="token punctuation">[</span><span class="token string">&quot;callback&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> fnName<span class="token punctuation">;</span>\n\n        <span class="token comment">// 拼接url</span>\n        <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            params<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        url <span class="token operator">+=</span> params<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        scriptNode<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\n        <span class="token comment">// 传递的是一个匿名的回调函数，要执行的话，暴露为一个全局方法</span>\n        global<span class="token punctuation">[</span>fnName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            container<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">delete</span> global<span class="token punctuation">[</span>fnName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 出错处理</span>\n        scriptNode<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span>error<span class="token operator">:</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            container<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            global<span class="token punctuation">[</span>fnName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">delete</span> global<span class="token punctuation">[</span>fnName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        scriptNode<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;text/javascript&quot;</span><span class="token punctuation">;</span>\n        container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    global<span class="token punctuation">.</span>jsonp <span class="token operator">=</span> jsonp<span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_21、懒加载和预加载"><a class="header-anchor" href="#_21、懒加载和预加载" aria-hidden="true">#</a> 21、懒加载和预加载</h3><p><strong>懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式。</strong> 用户滚动到他们之前，可视区域外的图像不会加载。这与图像预加载相反，在长网页中使用延迟加载将使网页加载更快。在某些情况下，它可以帮助减少服务器负载。常用于图片很多，页面很长的电商网站的场景。</p><p>优势：</p><ul><li><strong>提升用户体验</strong>，不妨设想下，用户打开像手机淘宝长页面的时候，如果页面上所有的图片都需要加载，由于图片数目较大，等待时间较长，用户难免心生抱怨，这严重影响了用户体验。</li><li><strong>减少无效资源的加载</strong>，这样能明显减少服务器的压力和流量。</li><li><strong>防止并发加载的资源过多会阻塞js的加载</strong>，影响网站的正常使用。</li></ul><p>预加载：</p><p>预加载简单来说就是将所有所需的资源提前请求加载到本地，这样后面再需要用到时就直接从缓存取资源</p><h2 id="_22、js执行会阻塞dom树的解析和渲染，那么css加载会阻塞dom树的解析和渲染吗？"><a class="header-anchor" href="#_22、js执行会阻塞dom树的解析和渲染，那么css加载会阻塞dom树的解析和渲染吗？" aria-hidden="true">#</a> 22、js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？</h2><ul><li>css加载不会阻塞DOM数的解析</li><li>css加载会阻塞DOM树的渲染</li><li>css加载会阻塞后面js语句的执行</li></ul><p><a href="https://juejin.cn/post/6844903667733118983" target="_blank" rel="noopener noreferrer">css加载会造成阻塞吗?</a></p><h2 id="_23、如何判断两个变量相等"><a class="header-anchor" href="#_23、如何判断两个变量相等" aria-hidden="true">#</a> 23、如何判断两个变量相等</h2><p><code>Object.is</code></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is" target="_blank" rel="noopener noreferrer">see detail</a></p>',104);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
