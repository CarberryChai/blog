import{l as n,f as a,G as s}from"./framework.5c8a4622.js";const e='{"title":"前端部署的一点经验","description":"","frontmatter":{},"headers":[{"level":2,"title":"准备条件","slug":"准备条件"},{"level":2,"title":"安装 nginx","slug":"安装-nginx"},{"level":2,"title":"启动 nginx","slug":"启动-nginx"},{"level":2,"title":"单页应用的 nginx 配置修改","slug":"单页应用的-nginx-配置修改"}],"relativePath":"frontend/FrontEnd-deploy.md","lastUpdated":1609742544038}',p={},o=s('<h1 id="前端部署的一点经验"><a class="header-anchor" href="#前端部署的一点经验" aria-hidden="true">#</a> 前端部署的一点经验</h1><p>现在普遍采用的前后端分离的开发模式，这样的话前后端也会分开部署，加快开发进度。</p><p>下面以单页应用部署到 centos 7 的 nginx 服务器上为例，记录一下自己学习的过程。</p><h2 id="准备条件"><a class="header-anchor" href="#准备条件" aria-hidden="true">#</a> 准备条件</h2><ol><li>VMware Fusion （虚拟机容器）</li><li>Centos 7 Linux 系统镜像 （网址：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener noreferrer"></a>）</li></ol><p>具体的在虚拟机下安装 Centos 可以看<a href="https://mp.weixin.qq.com/s/WeZLtfrMdnISpX3v5WpJfA" target="_blank" rel="noopener noreferrer">这个教程</a></p><p>对于以 create-react-app 脚手架生成的工程来说</p><img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/image-20200612143335920-CzqrPH.png" alt="image-20200612143335920" style="zoom:50%;"><p>只需要<code>yarn build</code>就可以了，之后会在当前目录生成一个 build 文件夹，接下来我们压缩这个文件夹</p><div class="language-bash"><pre><code><span class="token function">tar</span> -vczf build.tar.gz build\n</code></pre></div><p>在命令行运行这个命令会把 build 文件夹压缩成.tar.gz 文件</p><p>下面用<code>sftp</code>上传到我们的目标服务器，此处就是我本地的 192.168.0.101 主机，<code>sftp</code>和<code>ssh</code>命令很像</p><div class="language-bash"><pre><code><span class="token comment"># 以root用户连接到服务器，输入密码</span>\n<span class="token function">sftp</span> root@192.168.0.101\n<span class="token comment"># ls显示服务器文件列表</span>\n<span class="token function">ls</span>\n<span class="token comment"># lls显示本地文件列表</span>\nlls\n<span class="token comment"># cd 服务器上更改目录</span>\n<span class="token builtin class-name">cd</span>\n<span class="token comment"># lcd本地更改目录</span>\nlcd\n<span class="token comment"># put filename 把本地当前路径下的filename文件上传到服务器当前路径</span>\nput build.tar.gz\n<span class="token comment"># get filename 把服务器上文件下载到本地</span>\n</code></pre></div><p>这里我们运行<code>put build.tar.gz</code>上传到/root 目录</p><h2 id="安装-nginx"><a class="header-anchor" href="#安装-nginx" aria-hidden="true">#</a> 安装 nginx</h2><p>下载 nginx 安装包，这里的是 nginx-1.19.8.tar.gz，用上面的方法用<code>sftp</code>命令上传到<code>root</code>目录</p><ol><li><p>在<code>/usr/local/</code>下创建<code>nginx</code>文件夹并进入</p><div class="language-bash"><pre><code><span class="token builtin class-name">cd</span> /usr/local\n<span class="token function">mkdir</span> nginx\n<span class="token builtin class-name">cd</span> nginx\n</code></pre></div><ol start="2"><li>将<code>nginx</code>安装包解压到<code>/usr/local/nginx</code></li></ol><div class="language-bash"><pre><code><span class="token function">tar</span> zxvf /root/nginx-1.19.8.tar.gz -C ./\n</code></pre></div></li></ol><p>解压完之后，/usr/local/nginx ⽬录中会出现⼀个 nginx-1.19.8 的⽬录</p><p>预先安装额外的依赖</p><div class="language-bash"><pre><code>yum -y <span class="token function">install</span> pcre-devel\nyum -y <span class="token function">install</span> openssl openssl-devel\n</code></pre></div><p>编译安装 nginx</p><div class="language-bash"><pre><code><span class="token builtin class-name">cd</span> nginx-1.19.8\n./configure\n<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>\n</code></pre></div><p>安装完成后，Nginx 的可执⾏⽂件位置位于</p><div class="language-bash"><pre><code>/usr/local/nginx/sbin/nginx\n</code></pre></div><h2 id="启动-nginx"><a class="header-anchor" href="#启动-nginx" aria-hidden="true">#</a> 启动 nginx</h2><div class="language-bash"><pre><code><span class="token builtin class-name">cd</span> /usr/local/nginx/sbin\n./nginx\n</code></pre></div><p>这时候我们去浏览器输入地址：192.168.0.101 发现访问不了</p><p>我们的宿主机地址是：192.168.0.102</p><p>在宿主机命令行下 <code>ping 192.168.0.101</code>是通的</p><p>在服务器 ping 宿主机<code>ping 192.168.0.102</code>也是通</p><p>在服务器 ping 百度<code>ping baidu.com</code>也是通的</p><p>在服务器上运行 <code>curl localhost</code>可以返回 welcome to nginx 的 index.html</p><p>最好发现是防火墙的问题！！！</p><p>防火墙没有开启 80 端口，修改防火墙配置</p><div class="language-bash"><pre><code>firewall-cmd --permanent --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp\nfirewall-cmd --reload\n</code></pre></div><p>然后到宿主机的浏览器刷新 192.168.0.101 地址发现可以访了。</p><h2 id="单页应用的-nginx-配置修改"><a class="header-anchor" href="#单页应用的-nginx-配置修改" aria-hidden="true">#</a> 单页应用的 nginx 配置修改</h2><p>前后端分离的项目，前端本地开发一般都会在本地开启一个服务器，然后把 ajax 请求代理到后端服务器上去。</p><p><img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/image-20200612151311162-WnH9ZZ.png" alt="image-20200612151311162"></p><p>上图就是我们开发经常用到的 webpack devServer 的 proxy 设置，把以<code>/api</code>开头的请求代理到<code>target</code>服务上，并对路径进行重写，实际请求去掉了/api。同理部署到生产环境 nginx 服务器上时也需要进行相似的配置。</p><div class="language-nginx"><pre><code>\n<span class="token keyword">server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">listen</span>              <span class="token number">80</span><span class="token punctuation">;</span>\n    <span class="token keyword">server_name</span>         abc<span class="token punctuation">.</span>com<span class="token punctuation">;</span>\n    <span class="token keyword">access_log</span>  <span class="token string">&quot;pipe:rollback /data/log/nginx/access.log interval=1d baknum=7 maxsize=1G&quot;</span>  main<span class="token punctuation">;</span>\n\n    <span class="token keyword">location</span> <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">{</span>\n        <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">;</span>\n        <span class="token keyword">proxy_set_header</span>  X<span class="token operator">-</span>Real<span class="token operator">-</span>IP        <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>\n        <span class="token keyword">proxy_set_header</span>  X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For  <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>\n        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>NginX<span class="token operator">-</span><span class="token keyword">Proxy</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">rewrite</span> <span class="token operator">^</span><span class="token operator">/</span>order<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token operator">/</span>$<span class="token number">1</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><p>通常单页应用如果用到路由的话，像 react-router 用 mode history 时，需要 nginx 这样配置</p><div class="language-nginx"><pre><code>  <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>\n       <span class="token keyword">root</span>   <span class="token operator">/</span><span class="token keyword">root</span><span class="token operator">/</span>build<span class="token punctuation">;</span>\n       <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre></div>',43);p.render=function(s,e,p,t,c,l){return n(),a("div",null,[o])};export default p;export{e as __pageData};
